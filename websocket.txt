websocket using spring boot and angular
=======================================

1) pom.xml

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>
---------------------------------------------------------------------

2)WebSocketConfig.java

package com.qk.qcp.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
    
    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/processrun");
        config.setApplicationDestinationPrefixes("/app");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/socket")
            .setAllowedOrigins("*")
            .withSockJS();
    }

}

----------------------------------------------------------------------

3) ProcessRunService.java , while saving processRun, convert and send the message to 'processrun'

import org.springframework.messaging.simp.SimpMessagingTemplate;

// dependency injection of messageTemplate

// after saving processrun in database, call following
messagingTemplate.convertAndSend("/processrun", processRunDTO);


-----------------------------------------------------------------------

4) package.json

    "sockjs-client": "1.3.0",
    "stompjs": "2.3.3",
    "net": "^1.0.2",

-----------------------------------------------------------------------

5) process-run.component.ts

import * as Stomp from 'stompjs';
import * as SockJS from 'sockjs-client';


private wsUrl = './socket'
private stompClient;

// in the constructor, call following method to initialize websocket

this.initializeWebSocketConnection();
	

initializeWebSocketConnection(){
	let ws = new SockJS(this.wsUrl);
	this.stompClient = Stomp.over(ws);
	let that = this;
	this.stompClient.connect({}, function(frame) {
	  that.stompClient.subscribe('/processrun', (message) => {
		if(message.body) {
			const temp: IProcessRun = JSON.parse(message.body); 
			let i = that.processRuns.findIndex(processRun => processRun.id === temp.id);
			if (i == -1) {
				that.processRuns.unshift(temp); // unshift to push the data in the beginning of array
			}
			else {
				that.processRuns[i] = temp;    
			}
		}
	  });
	});
}
	