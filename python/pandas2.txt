Pandas DataFrame: selecting, indexing and assigning
1)

$reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)
$pd.set_option("display.max_rows", 5)

$reviews.head()
first five rows of the dataframe will be displayed.

2) Select the `description` column from `reviews` and assign the result 
to the variable `desc`.
$ desc = reviews['description']

As an example, say we would like to select the column column from a DataFrame table. 
Then we have two options: we can call either table.column or table["column"]

desc is a pandas Series object, with an index matching the reviews DataFrame. 
In general, when we select a single column from a DataFrame, we'll get a Series.

3) Select the first value from the description column of `reviews`, 
assigning it to variable `first_description`.

first_description = reviews.description[0]

Note that while this is the preferred way to obtain the entry in the DataFrame, many other options will return a valid result, 
such as reviews.description.loc[0], reviews.description[0], and more!

To obtain a specific entry (corresponding to column column and row i) 
in a DataFrame table, we can call table.column.iloc[i]. 
Remember that Python indexing starts at 0!

4)Select the first row of data (the first record) from `reviews`, 
assigning it to the variable `first_row`.

first_row = reviews.iloc[0]

5) Select the first 10 values from the `description` column in `reviews`, 
assigning the result to variable `first_descriptions`.

first_descriptions = reviews.loc[:9, 'description']

first_descriptions = reviews.description.iloc[:10]
Note that many other options will return a valid result, such as desc.head(10) 
and reviews.loc[:9, "description"].

6) Select the records with index labels `1`, `2`, `3`, `5`, and `8`, assigning the result to the variable 
`sample_reviews`.

sample_reviews = reviews.loc[[1,2,3,5,8], :]

7) Create a variable `df` containing the `country`, `province`, `region_1`, and `region_2` columns of the records 
with the index labels `0`, `1`, `10`, and `100`.

cols = ['country', 'province', 'region_1', 'region_2']
indices = [0, 1, 10, 100]
df = reviews.loc[indices, cols]

8)
Create a variable `df` containing the `country` and `variety` 
columns of the first 100 records. 

`iloc` uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. So `0:10` will select entries `0,...,9`. `loc`, meanwhile, indexes inclusively. 
So `0:10` will select entries `0,...,10`

cols = ['country', 'variety']
df = reviews.loc[:99, cols]

or

cols_idx = [0, 11]
df = reviews.iloc[:100, cols_idx]

9)
Create a DataFrame `italian_wines` containing reviews of wines made in `Italy`

italian_wines = reviews[reviews.country == 'Italy']

10) 
Create a DataFrame `top_oceania_wines` containing all reviews with 
at least 95 points (out of 100) for wines from Australia or New Zealand.

top_oceania_wines = reviews.loc[(reviews.points >= 95) & (reviews.country.isin(['Australia','New Zealand']))]



