Ansible automates IT operations like application deployment, intra-service orchestration, cloud provisioning and many other things.
Ansible provides simple automation language that can describe IT application infrastrucure in Ansible playbooks.
Ansible provides the automation engine which runs the playbooks.
Ansible tower is an enterprise framework for contolling, securing and managing your ansible automation with a UI and restful API.
Ansible is agent less. uses openssh and winrm to communicate to remote machines. 

what is does:
1. config management
2. app deployment
3. provisioning
4. continuous delivery
5. security and compliance
6. orchestration??

what we need to achieve automation of IT operation
-inventory ie. list of hosts 
-playbook which will have actual tasks
it uses ssh to communicate with unix machines . 
it uses WinRM to communicate with windows machines.
it uses API to communicate with communicate with cloud.


----
installation: (for debian/ubuntu use apt, for fedora yum)
$ sudo apt-add-repository -y ppa:ansible/ansible 
$ sudo apt-get update
$ sudo apt install ansible
or 
$ sudo yum install ansible
it will install python as well. 

check if ansible is installed
$ ansible --version
ansible 2.8.0
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]

--------
playbooks are plain-text yaml files.
playbooks contain plays.
plays contain tasks.
tasks call modules.

tasks run sequentially.

handlers are triggered by tasks and are run once, at the end of plays.

Using Ansible roles, a large complex playbooks can be divided into smaller playbooks which can be reused.

ansible_galaxy is repository of user generated roles.

------
3 ways to run
1)Ad-hoc
ansible <inventory> <options>
ansible web -a /bin/date
ansible web -m ping
ansible web -m yum -a "name=openssl state=latest"

2)using playbooks
ansible-playbook <options>
ansible-playbook my-playbook.yml

ansible also provides check-mode (dry run) for ad-hoc commands and playbook.
3)ansible tower (automation framework)

---


generate ssh key on client and copy to server
on machine 10.0.19.240
1) ssh-keyget -t rsa 
this will generate public and private key on the client (where ansible is installed. here ansible is client and the remote machines where the playbooks will be executed are server). 
2) ssh-copy-id root@10.0.19.209 -p 8821
---

test ansible
$ansible host_captcha -m ping --ask-pass
here captcha is host name. ping is command. --ask-pass will ask the password to connect to machine 'captcha'.

the file /etc/ansible/hosts looks like this.
[host_captcha]
10.0.19.209:8821


the port 8821 is provided as its not using default ssh port 22. 

password can be mentioned in hosts file as well. so that no need to use --ask-pass option. but password should
be stored in vault. (check vars and vaults)

[captcha]
10.0.19.209:8821 ansible_password=Qkiosk@4321

-------------------------
1) Error:
[quality@QKDSK395 ~]$ ansible captcha -m ping
10.0.19.209 | FAILED! => {
    "msg": "Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host' s fingerprint to your known_hosts file to manage this host."
}

run this command as root user.
$su
------------------------------------------
$ export ANSIBLE_HOST_KEY_CHECKING=False

you can also provide passwords in hosts file like following:
[captcha:vars]
ansible_password=Qkiosk@4321
-----------------

specify localhost by adding following in the inventory file (/etc/ansible/hosts)
localhost ansible_connection=local ansible_python_interpreter="/usr/bin/env python"

--
awx - open source ansible tower

-----ansible-galaxy---------
to show list of roles insalled
$ ansible-galaxy list

to remove an installed role
$ ansible-galaxy remove username.role_name

-------awx installation -------------------------
awx will run within docker. it uses postgres, rabbitmq, memcache. 

1) check firewall status
$ systemctl status firewalld

to disable firewall
$ systemctl stop firewalld
$ systemctl disable firewalld

2) check status of SELinux, should be disabled
$ seStatus

3) check repository list
$ yum repolist

4) add epel-release repository
$ yum install epel-release

5) prerequisite for awx: git, gettext, ansible, docker, nodejs, npm, gcc-c++, bzip2, python-docker-py
$ yum -y install git gettext ansible docker nodejs npm gcc-c++ bzip2 python-docker-py

6) start docker service
$ systemctl start docker

enable docker whenn system starts
$ systemctl enable docker

check the docker status
$ systemctl status docker

7) now download awx from git
docker
$ git clone https://github.com/ansible/awx.git

8) go to awx/installer folder and run ansible-playbook command
$ ansible-playbook -i inventory install.yml
error: *
fatal: [localhost]: FAILED! => {"changed": false, "msg": "Unable to load docker-compose. Try `pip install docker-compose`. Error: No module named compose"}

$ yum install python-setuptools
$ sudo easy_install pip
$ pip install docker-compose

again run install.yml.

check the logs. 
$ docker logs -f awx_task